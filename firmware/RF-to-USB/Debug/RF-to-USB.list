
RF-to-USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f3c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  080030c8  080030c8  000040c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ec  080042ec  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080042ec  080042ec  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042ec  080042ec  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ec  080042ec  000052ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042f0  080042f0  000052f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080042f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  2000000c  08004300  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  08004300  00006578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce8a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002263  00000000  00000000  00012ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00015130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d2  00000000  00000000  00015d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc4f  00000000  00000000  000165d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcf3  00000000  00000000  00036221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfef5  00000000  00000000  00043f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103e09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f64  00000000  00000000  00103e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00106db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080030b0 	.word	0x080030b0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080030b0 	.word	0x080030b0

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fac4 	bl	800075e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f833 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f915 	bl	8000408 <MX_GPIO_Init>
  MX_SPI3_Init();
 80001de:	f000 f8ad 	bl	800033c <MX_SPI3_Init>
  MX_USB_PCD_Init();
 80001e2:	f000 f8e9 	bl	80003b8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, 1);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2104      	movs	r1, #4
 80001ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001ee:	f000 fdcb 	bl	8000d88 <HAL_GPIO_WritePin>

  ssd1306_Init();
 80001f2:	f002 fd31 	bl	8002c58 <ssd1306_Init>
  ssd1306_Fill(Black);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f002 fd98 	bl	8002d2c <ssd1306_Fill>
  ssd1306_SetCursor(2, 0);
 80001fc:	2100      	movs	r1, #0
 80001fe:	2002      	movs	r0, #2
 8000200:	f002 fee0 	bl	8002fc4 <ssd1306_SetCursor>
  ssd1306_WriteString("Miauw!", Font_16x24, White);
 8000204:	4b0c      	ldr	r3, [pc, #48]	@ (8000238 <main+0x6c>)
 8000206:	2201      	movs	r2, #1
 8000208:	9200      	str	r2, [sp, #0]
 800020a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800020c:	480b      	ldr	r0, [pc, #44]	@ (800023c <main+0x70>)
 800020e:	f002 feb3 	bl	8002f78 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000212:	f002 fda3 	bl	8002d5c <ssd1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 8000216:	2104      	movs	r1, #4
 8000218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021c:	f000 fdcc 	bl	8000db8 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RX_GPIO_Port, LED_RX_Pin);
 8000220:	2108      	movs	r1, #8
 8000222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000226:	f000 fdc7 	bl	8000db8 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800022a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800022e:	f000 fb0b 	bl	8000848 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 8000232:	bf00      	nop
 8000234:	e7ef      	b.n	8000216 <main+0x4a>
 8000236:	bf00      	nop
 8000238:	080042e0 	.word	0x080042e0
 800023c:	080030c8 	.word	0x080030c8

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b09e      	sub	sp, #120	@ 0x78
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800024a:	2244      	movs	r2, #68	@ 0x44
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 ff02 	bl	8003058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	f107 0320 	add.w	r3, r7, #32
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000264:	f107 0308 	add.w	r3, r7, #8
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]
 8000274:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000276:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800027a:	f000 ff0f 	bl	800109c <HAL_PWREx_ControlVoltageScaling>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x48>
  {
    Error_Handler();
 8000284:	f000 f92a 	bl	80004dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000288:	2310      	movs	r3, #16
 800028a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000294:	2360      	movs	r3, #96	@ 0x60
 8000296:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	2302      	movs	r3, #2
 800029a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800029c:	2301      	movs	r3, #1
 800029e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002a0:	2301      	movs	r3, #1
 80002a2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002a4:	2328      	movs	r3, #40	@ 0x28
 80002a6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002a8:	2307      	movs	r3, #7
 80002aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ac:	2302      	movs	r3, #2
 80002ae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002b0:	2302      	movs	r3, #2
 80002b2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 ff55 	bl	8001168 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002c4:	f000 f90a 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	623b      	str	r3, [r7, #32]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2303      	movs	r3, #3
 80002ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	633b      	str	r3, [r7, #48]	@ 0x30

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002dc:	f107 0320 	add.w	r3, r7, #32
 80002e0:	2104      	movs	r1, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 fb54 	bl	8001990 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002ee:	f000 f8f5 	bl	80004dc <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <SystemClock_Config+0xf8>)
 80002f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002f6:	4a10      	ldr	r2, [pc, #64]	@ (8000338 <SystemClock_Config+0xf8>)
 80002f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <SystemClock_Config+0xf8>)
 8000300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000302:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 800030e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000314:	2300      	movs	r3, #0
 8000316:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8000318:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 800031c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800031e:	2322      	movs	r3, #34	@ 0x22
 8000320:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000322:	2320      	movs	r3, #32
 8000324:	61fb      	str	r3, [r7, #28]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	4618      	mov	r0, r3
 800032c:	f001 ff12 	bl	8002154 <HAL_RCCEx_CRSConfig>
}
 8000330:	bf00      	nop
 8000332:	3778      	adds	r7, #120	@ 0x78
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	40021000 	.word	0x40021000

0800033c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000340:	4b1b      	ldr	r3, [pc, #108]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000342:	4a1c      	ldr	r2, [pc, #112]	@ (80003b4 <MX_SPI3_Init+0x78>)
 8000344:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000346:	4b1a      	ldr	r3, [pc, #104]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000348:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800034c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800034e:	4b18      	ldr	r3, [pc, #96]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000354:	4b16      	ldr	r3, [pc, #88]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000356:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800035a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800035c:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <MX_SPI3_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000362:	4b13      	ldr	r3, [pc, #76]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000368:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <MX_SPI3_Init+0x74>)
 800036a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800036e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000370:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000376:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <MX_SPI3_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000382:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000388:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <MX_SPI3_Init+0x74>)
 800038a:	2207      	movs	r2, #7
 800038c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800038e:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <MX_SPI3_Init+0x74>)
 8000396:	2208      	movs	r2, #8
 8000398:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800039a:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <MX_SPI3_Init+0x74>)
 800039c:	f002 f80e 	bl	80023bc <HAL_SPI_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80003a6:	f000 f899 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000028 	.word	0x20000028
 80003b4:	40003c00 	.word	0x40003c00

080003b8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80003bc:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <MX_USB_PCD_Init+0x48>)
 80003be:	4a11      	ldr	r2, [pc, #68]	@ (8000404 <MX_USB_PCD_Init+0x4c>)
 80003c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <MX_USB_PCD_Init+0x48>)
 80003c4:	2208      	movs	r2, #8
 80003c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80003c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <MX_USB_PCD_Init+0x48>)
 80003ca:	2202      	movs	r2, #2
 80003cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80003ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <MX_USB_PCD_Init+0x48>)
 80003d0:	2202      	movs	r2, #2
 80003d2:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80003d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <MX_USB_PCD_Init+0x48>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80003da:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <MX_USB_PCD_Init+0x48>)
 80003dc:	2200      	movs	r2, #0
 80003de:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80003e0:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <MX_USB_PCD_Init+0x48>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80003e6:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <MX_USB_PCD_Init+0x48>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80003ec:	4804      	ldr	r0, [pc, #16]	@ (8000400 <MX_USB_PCD_Init+0x48>)
 80003ee:	f000 fd20 	bl	8000e32 <HAL_PCD_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80003f8:	f000 f870 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000008c 	.word	0x2000008c
 8000404:	40006800 	.word	0x40006800

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 030c 	add.w	r3, r7, #12
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b2d      	ldr	r3, [pc, #180]	@ (80004d4 <MX_GPIO_Init+0xcc>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	4a2c      	ldr	r2, [pc, #176]	@ (80004d4 <MX_GPIO_Init+0xcc>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042a:	4b2a      	ldr	r3, [pc, #168]	@ (80004d4 <MX_GPIO_Init+0xcc>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b27      	ldr	r3, [pc, #156]	@ (80004d4 <MX_GPIO_Init+0xcc>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	4a26      	ldr	r2, [pc, #152]	@ (80004d4 <MX_GPIO_Init+0xcc>)
 800043c:	f043 0302 	orr.w	r3, r3, #2
 8000440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <MX_GPIO_Init+0xcc>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TX_Pin|LED_RX_Pin|OLED_DC_Pin|OLED_CS_Pin
 800044e:	2200      	movs	r2, #0
 8000450:	21ec      	movs	r1, #236	@ 0xec
 8000452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000456:	f000 fc97 	bl	8000d88 <HAL_GPIO_WritePin>
                          |OLED_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI3_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	21c0      	movs	r1, #192	@ 0xc0
 800045e:	481e      	ldr	r0, [pc, #120]	@ (80004d8 <MX_GPIO_Init+0xd0>)
 8000460:	f000 fc92 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN2_EXTI_Pin BTN1_EXTI_Pin NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = BTN2_EXTI_Pin|BTN1_EXTI_Pin|NRF_IRQ_Pin;
 8000464:	f248 0303 	movw	r3, #32771	@ 0x8003
 8000468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800046a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800046e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 030c 	add.w	r3, r7, #12
 8000478:	4619      	mov	r1, r3
 800047a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800047e:	f000 fb19 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TX_Pin LED_RX_Pin OLED_DC_Pin OLED_CS_Pin
                           OLED_RES_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin|LED_RX_Pin|OLED_DC_Pin|OLED_CS_Pin
 8000482:	23ec      	movs	r3, #236	@ 0xec
 8000484:	60fb      	str	r3, [r7, #12]
                          |OLED_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	f107 030c 	add.w	r3, r7, #12
 8000496:	4619      	mov	r1, r3
 8000498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049c:	f000 fb0a 	bl	8000ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_CS_Pin NRF_CE_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin|NRF_CE_Pin;
 80004a0:	23c0      	movs	r3, #192	@ 0xc0
 80004a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	4619      	mov	r1, r3
 80004b6:	4808      	ldr	r0, [pc, #32]	@ (80004d8 <MX_GPIO_Init+0xd0>)
 80004b8:	f000 fafc 	bl	8000ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2028      	movs	r0, #40	@ 0x28
 80004c2:	f000 fac0 	bl	8000a46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004c6:	2028      	movs	r0, #40	@ 0x28
 80004c8:	f000 fad9 	bl	8000a7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004cc:	bf00      	nop
 80004ce:	3720      	adds	r7, #32
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000
 80004d8:	48000400 	.word	0x48000400

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <Error_Handler+0x8>

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <HAL_MspInit+0x44>)
 80004f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <HAL_MspInit+0x44>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <HAL_MspInit+0x44>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <HAL_MspInit+0x44>)
 8000508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <HAL_MspInit+0x44>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000510:	6593      	str	r3, [r2, #88]	@ 0x58
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <HAL_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	@ 0x28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a17      	ldr	r2, [pc, #92]	@ (80005ac <HAL_SPI_MspInit+0x7c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d127      	bne.n	80005a2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000552:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <HAL_SPI_MspInit+0x80>)
 8000554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000556:	4a16      	ldr	r2, [pc, #88]	@ (80005b0 <HAL_SPI_MspInit+0x80>)
 8000558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800055c:	6593      	str	r3, [r2, #88]	@ 0x58
 800055e:	4b14      	ldr	r3, [pc, #80]	@ (80005b0 <HAL_SPI_MspInit+0x80>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000562:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b11      	ldr	r3, [pc, #68]	@ (80005b0 <HAL_SPI_MspInit+0x80>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	4a10      	ldr	r2, [pc, #64]	@ (80005b0 <HAL_SPI_MspInit+0x80>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_SPI_MspInit+0x80>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000582:	2338      	movs	r3, #56	@ 0x38
 8000584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800058e:	2303      	movs	r3, #3
 8000590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000592:	2306      	movs	r3, #6
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <HAL_SPI_MspInit+0x84>)
 800059e:	f000 fa89 	bl	8000ab4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80005a2:	bf00      	nop
 80005a4:	3728      	adds	r7, #40	@ 0x28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40003c00 	.word	0x40003c00
 80005b0:	40021000 	.word	0x40021000
 80005b4:	48000400 	.word	0x48000400

080005b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09a      	sub	sp, #104	@ 0x68
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2254      	movs	r2, #84	@ 0x54
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fd45 	bl	8003058 <memset>
  if(hpcd->Instance==USB)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a27      	ldr	r2, [pc, #156]	@ (8000670 <HAL_PCD_MspInit+0xb8>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d147      	bne.n	8000668 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80005e2:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005ec:	2318      	movs	r3, #24
 80005ee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005f0:	2307      	movs	r3, #7
 80005f2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80005fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000600:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fbae 	bl	8001d68 <HAL_RCCEx_PeriphCLKConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 8000612:	f7ff ff63 	bl	80004dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <HAL_PCD_MspInit+0xbc>)
 8000618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800061a:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <HAL_PCD_MspInit+0xbc>)
 800061c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000620:	6593      	str	r3, [r2, #88]	@ 0x58
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <HAL_PCD_MspInit+0xbc>)
 8000624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000626:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <HAL_PCD_MspInit+0xbc>)
 8000630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d114      	bne.n	8000664 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <HAL_PCD_MspInit+0xbc>)
 800063c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800063e:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <HAL_PCD_MspInit+0xbc>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000644:	6593      	str	r3, [r2, #88]	@ 0x58
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <HAL_PCD_MspInit+0xbc>)
 8000648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800064a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000652:	f000 fd79 	bl	8001148 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <HAL_PCD_MspInit+0xbc>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800065a:	4a06      	ldr	r2, [pc, #24]	@ (8000674 <HAL_PCD_MspInit+0xbc>)
 800065c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000660:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_MspInit 1 */

  }

}
 8000662:	e001      	b.n	8000668 <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8000664:	f000 fd70 	bl	8001148 <HAL_PWREx_EnableVddUSB>
}
 8000668:	bf00      	nop
 800066a:	3768      	adds	r7, #104	@ 0x68
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40006800 	.word	0x40006800
 8000674:	40021000 	.word	0x40021000

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <NMI_Handler+0x4>

08000680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <MemManage_Handler+0x4>

08000690 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <UsageFault_Handler+0x4>

080006a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ce:	f000 f89b 	bl	8000808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 80006da:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80006de:	f000 fb85 	bl	8000dec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800070c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff ffea 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	@ (8000748 <LoopForever+0x6>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	@ (800074c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	@ (8000750 <LoopForever+0xe>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	@ (8000758 <LoopForever+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f002 fc95 	bl	8003068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073e:	f7ff fd45 	bl	80001cc <main>

08000742 <LoopForever>:

LoopForever:
    b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000744:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000750:	080042f4 	.word	0x080042f4
  ldr r2, =_sbss
 8000754:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000758:	20000578 	.word	0x20000578

0800075c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_IRQHandler>

0800075e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000768:	2003      	movs	r0, #3
 800076a:	f000 f961 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800076e:	200f      	movs	r0, #15
 8000770:	f000 f80e 	bl	8000790 <HAL_InitTick>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800077a:	2301      	movs	r3, #1
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	e001      	b.n	8000784 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000780:	f7ff feb2 	bl	80004e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000784:	79fb      	ldrb	r3, [r7, #7]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <HAL_InitTick+0x6c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d023      	beq.n	80007ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <HAL_InitTick+0x70>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <HAL_InitTick+0x6c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f96d 	bl	8000a9a <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d10f      	bne.n	80007e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d809      	bhi.n	80007e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007cc:	2200      	movs	r2, #0
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295
 80007d4:	f000 f937 	bl	8000a46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000804 <HAL_InitTick+0x74>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	e007      	b.n	80007f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007e0:	2301      	movs	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e004      	b.n	80007f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	e001      	b.n	80007f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000000 	.word	0x20000000
 8000804:	20000004 	.word	0x20000004

08000808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_IncTick+0x20>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_IncTick+0x24>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a04      	ldr	r2, [pc, #16]	@ (800082c <HAL_IncTick+0x24>)
 800081a:	6013      	str	r3, [r2, #0]
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008
 800082c:	2000036c 	.word	0x2000036c

08000830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b03      	ldr	r3, [pc, #12]	@ (8000844 <HAL_GetTick+0x14>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2000036c 	.word	0x2000036c

08000848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000850:	f7ff ffee 	bl	8000830 <HAL_GetTick>
 8000854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000860:	d005      	beq.n	800086e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000862:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <HAL_Delay+0x44>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800086e:	bf00      	nop
 8000870:	f7ff ffde 	bl	8000830 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	d8f7      	bhi.n	8000870 <HAL_Delay+0x28>
  {
  }
}
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008

08000890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a0:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008a6:	68ba      	ldr	r2, [r7, #8]
 80008a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008ac:	4013      	ands	r3, r2
 80008ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c2:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008dc:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <__NVIC_GetPriorityGrouping+0x18>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	f003 0307 	and.w	r3, r3, #7
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	2b00      	cmp	r3, #0
 8000904:	db0b      	blt.n	800091e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 021f 	and.w	r2, r3, #31
 800090c:	4907      	ldr	r1, [pc, #28]	@ (800092c <__NVIC_EnableIRQ+0x38>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	095b      	lsrs	r3, r3, #5
 8000914:	2001      	movs	r0, #1
 8000916:	fa00 f202 	lsl.w	r2, r0, r2
 800091a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	@ (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	@ (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	@ 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff29 	bl	8000890 <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff3e 	bl	80008d8 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff8e 	bl	8000984 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5d 	bl	8000930 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff31 	bl	80008f4 <__NVIC_EnableIRQ>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b087      	sub	sp, #28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac2:	e148      	b.n	8000d56 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 813a 	beq.w	8000d50 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d005      	beq.n	8000af4 <HAL_GPIO_Init+0x40>
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d130      	bne.n	8000b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2203      	movs	r2, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	091b      	lsrs	r3, r3, #4
 8000b40:	f003 0201 	and.w	r2, r3, #1
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d017      	beq.n	8000b92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	689a      	ldr	r2, [r3, #8]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d123      	bne.n	8000be6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	08da      	lsrs	r2, r3, #3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3208      	adds	r2, #8
 8000ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	220f      	movs	r2, #15
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691a      	ldr	r2, [r3, #16]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0203 	and.w	r2, r3, #3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 8094 	beq.w	8000d50 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	4b52      	ldr	r3, [pc, #328]	@ (8000d74 <HAL_GPIO_Init+0x2c0>)
 8000c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c2c:	4a51      	ldr	r2, [pc, #324]	@ (8000d74 <HAL_GPIO_Init+0x2c0>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c34:	4b4f      	ldr	r3, [pc, #316]	@ (8000d74 <HAL_GPIO_Init+0x2c0>)
 8000c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c40:	4a4d      	ldr	r2, [pc, #308]	@ (8000d78 <HAL_GPIO_Init+0x2c4>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3302      	adds	r3, #2
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c6a:	d00d      	beq.n	8000c88 <HAL_GPIO_Init+0x1d4>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a43      	ldr	r2, [pc, #268]	@ (8000d7c <HAL_GPIO_Init+0x2c8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d007      	beq.n	8000c84 <HAL_GPIO_Init+0x1d0>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a42      	ldr	r2, [pc, #264]	@ (8000d80 <HAL_GPIO_Init+0x2cc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d101      	bne.n	8000c80 <HAL_GPIO_Init+0x1cc>
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1d6>
 8000c80:	2307      	movs	r3, #7
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1d6>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1d6>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c9a:	4937      	ldr	r1, [pc, #220]	@ (8000d78 <HAL_GPIO_Init+0x2c4>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ca8:	4b36      	ldr	r3, [pc, #216]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cf6:	4a23      	ldr	r2, [pc, #140]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cfc:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d20:	4a18      	ldr	r2, [pc, #96]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f aeaf 	bne.w	8000ac4 <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
 8000d94:	4613      	mov	r3, r2
 8000d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d98:	787b      	ldrb	r3, [r7, #1]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d9e:	887a      	ldrh	r2, [r7, #2]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000da6:	887a      	ldrh	r2, [r7, #2]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	041a      	lsls	r2, r3, #16
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	43d9      	mvns	r1, r3
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	400b      	ands	r3, r1
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	619a      	str	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000df8:	695a      	ldr	r2, [r3, #20]
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f806 	bl	8000e1c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e0ef      	b.n	8001024 <HAL_PCD_Init+0x1f2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d106      	bne.n	8000e5e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fbad 	bl	80005b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2203      	movs	r2, #3
 8000e62:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fe2f 	bl	8002ad4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e80:	f001 fe1a 	bl	8002ab8 <USB_CoreInit>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d005      	beq.n	8000e96 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0c6      	b.n	8001024 <HAL_PCD_Init+0x1f2>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fe34 	bl	8002b0a <USB_SetCurrentMode>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d005      	beq.n	8000eb4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e0b7      	b.n	8001024 <HAL_PCD_Init+0x1f2>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e03e      	b.n	8000f38 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000eba:	7bfa      	ldrb	r2, [r7, #15]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3311      	adds	r3, #17
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	440b      	add	r3, r1
 8000edc:	3310      	adds	r3, #16
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3313      	adds	r3, #19
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	440b      	add	r3, r1
 8000f04:	3320      	adds	r3, #32
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	3324      	adds	r3, #36	@ 0x24
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	3301      	adds	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	791b      	ldrb	r3, [r3, #4]
 8000f3c:	7bfa      	ldrb	r2, [r7, #15]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3bb      	bcc.n	8000eba <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	e044      	b.n	8000fd2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	791b      	ldrb	r3, [r3, #4]
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3b5      	bcc.n	8000f48 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3304      	adds	r3, #4
 8000fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fe6:	f001 fd9d 	bl	8002b24 <USB_DevInit>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e013      	b.n	8001024 <HAL_PCD_Init+0x1f2>
  }

  hpcd->USB_Address = 0U;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7adb      	ldrb	r3, [r3, #11]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d102      	bne.n	8001018 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f80a 	bl	800102c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fd9f 	bl	8002b60 <USB_DevDisconnect>

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001050:	b29b      	uxth	r3, r3
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	b29a      	uxth	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001064:	b29b      	uxth	r3, r3
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	b29a      	uxth	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <HAL_PWREx_GetVoltageRange+0x18>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40007000 	.word	0x40007000

0800109c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010aa:	d130      	bne.n	800110e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010b8:	d038      	beq.n	800112c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010c2:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2232      	movs	r2, #50	@ 0x32
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	0c9b      	lsrs	r3, r3, #18
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e0:	e002      	b.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010f4:	d102      	bne.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f2      	bne.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001108:	d110      	bne.n	800112c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e00f      	b.n	800112e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800111a:	d007      	beq.n	800112c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800111c:	4b07      	ldr	r3, [pc, #28]	@ (800113c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001124:	4a05      	ldr	r2, [pc, #20]	@ (800113c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800112a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000
 8001140:	20000000 	.word	0x20000000
 8001144:	431bde83 	.word	0x431bde83

08001148 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_PWREx_EnableVddUSB+0x1c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001156:	6053      	str	r3, [r2, #4]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40007000 	.word	0x40007000

08001168 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	f000 bc02 	b.w	8001980 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800117c:	4b96      	ldr	r3, [pc, #600]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001186:	4b94      	ldr	r3, [pc, #592]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80e4 	beq.w	8001366 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d007      	beq.n	80011b4 <HAL_RCC_OscConfig+0x4c>
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2b0c      	cmp	r3, #12
 80011a8:	f040 808b 	bne.w	80012c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	f040 8087 	bne.w	80012c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b4:	4b88      	ldr	r3, [pc, #544]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_OscConfig+0x64>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e3d9      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1a      	ldr	r2, [r3, #32]
 80011d0:	4b81      	ldr	r3, [pc, #516]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <HAL_RCC_OscConfig+0x7e>
 80011dc:	4b7e      	ldr	r3, [pc, #504]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011e4:	e005      	b.n	80011f2 <HAL_RCC_OscConfig+0x8a>
 80011e6:	4b7c      	ldr	r3, [pc, #496]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80011e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d223      	bcs.n	800123e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fd54 	bl	8001ca8 <RCC_SetFlashLatencyFromMSIRange>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e3ba      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120a:	4b73      	ldr	r3, [pc, #460]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a72      	ldr	r2, [pc, #456]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b70      	ldr	r3, [pc, #448]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	496d      	ldr	r1, [pc, #436]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001228:	4b6b      	ldr	r3, [pc, #428]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	4968      	ldr	r1, [pc, #416]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001238:	4313      	orrs	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
 800123c:	e025      	b.n	800128a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123e:	4b66      	ldr	r3, [pc, #408]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a65      	ldr	r2, [pc, #404]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	4b63      	ldr	r3, [pc, #396]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4960      	ldr	r1, [pc, #384]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001258:	4313      	orrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800125c:	4b5e      	ldr	r3, [pc, #376]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	495b      	ldr	r1, [pc, #364]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fd14 	bl	8001ca8 <RCC_SetFlashLatencyFromMSIRange>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e37a      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800128a:	f000 fc81 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 800128e:	4602      	mov	r2, r0
 8001290:	4b51      	ldr	r3, [pc, #324]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4950      	ldr	r1, [pc, #320]	@ (80013dc <HAL_RCC_OscConfig+0x274>)
 800129c:	5ccb      	ldrb	r3, [r1, r3]
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	fa22 f303 	lsr.w	r3, r2, r3
 80012a6:	4a4e      	ldr	r2, [pc, #312]	@ (80013e0 <HAL_RCC_OscConfig+0x278>)
 80012a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012aa:	4b4e      	ldr	r3, [pc, #312]	@ (80013e4 <HAL_RCC_OscConfig+0x27c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fa6e 	bl	8000790 <HAL_InitTick>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d052      	beq.n	8001364 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	e35e      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d032      	beq.n	8001330 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012ca:	4b43      	ldr	r3, [pc, #268]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a42      	ldr	r2, [pc, #264]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012d6:	f7ff faab 	bl	8000830 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012de:	f7ff faa7 	bl	8000830 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e347      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f0:	4b39      	ldr	r3, [pc, #228]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fc:	4b36      	ldr	r3, [pc, #216]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a35      	ldr	r2, [pc, #212]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b33      	ldr	r3, [pc, #204]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4930      	ldr	r1, [pc, #192]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131a:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	492b      	ldr	r1, [pc, #172]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]
 800132e:	e01a      	b.n	8001366 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a28      	ldr	r2, [pc, #160]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800133c:	f7ff fa78 	bl	8000830 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001344:	f7ff fa74 	bl	8000830 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e314      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1dc>
 8001362:	e000      	b.n	8001366 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001364:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d073      	beq.n	800145a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d005      	beq.n	8001384 <HAL_RCC_OscConfig+0x21c>
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b0c      	cmp	r3, #12
 800137c:	d10e      	bne.n	800139c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d10b      	bne.n	800139c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d063      	beq.n	8001458 <HAL_RCC_OscConfig+0x2f0>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d15f      	bne.n	8001458 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e2f1      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a4:	d106      	bne.n	80013b4 <HAL_RCC_OscConfig+0x24c>
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e025      	b.n	8001400 <HAL_RCC_OscConfig+0x298>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013bc:	d114      	bne.n	80013e8 <HAL_RCC_OscConfig+0x280>
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a05      	ldr	r2, [pc, #20]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a02      	ldr	r2, [pc, #8]	@ (80013d8 <HAL_RCC_OscConfig+0x270>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e013      	b.n	8001400 <HAL_RCC_OscConfig+0x298>
 80013d8:	40021000 	.word	0x40021000
 80013dc:	080030d0 	.word	0x080030d0
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000004 	.word	0x20000004
 80013e8:	4ba0      	ldr	r3, [pc, #640]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a9f      	ldr	r2, [pc, #636]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80013ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b9d      	ldr	r3, [pc, #628]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a9c      	ldr	r2, [pc, #624]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80013fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fa12 	bl	8000830 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fa0e 	bl	8000830 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	@ 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e2ae      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001422:	4b92      	ldr	r3, [pc, #584]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0f0      	beq.n	8001410 <HAL_RCC_OscConfig+0x2a8>
 800142e:	e014      	b.n	800145a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff f9fe 	bl	8000830 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff f9fa 	bl	8000830 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	@ 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e29a      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144a:	4b88      	ldr	r3, [pc, #544]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f0      	bne.n	8001438 <HAL_RCC_OscConfig+0x2d0>
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d060      	beq.n	8001528 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d005      	beq.n	8001478 <HAL_RCC_OscConfig+0x310>
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d119      	bne.n	80014a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d116      	bne.n	80014a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001478:	4b7c      	ldr	r3, [pc, #496]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_OscConfig+0x328>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e277      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b76      	ldr	r3, [pc, #472]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	061b      	lsls	r3, r3, #24
 800149e:	4973      	ldr	r1, [pc, #460]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a4:	e040      	b.n	8001528 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d023      	beq.n	80014f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ae:	4b6f      	ldr	r3, [pc, #444]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6e      	ldr	r2, [pc, #440]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ba:	f7ff f9b9 	bl	8000830 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c2:	f7ff f9b5 	bl	8000830 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e255      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d4:	4b65      	ldr	r3, [pc, #404]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b62      	ldr	r3, [pc, #392]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	495f      	ldr	r1, [pc, #380]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
 80014f4:	e018      	b.n	8001528 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f6:	4b5d      	ldr	r3, [pc, #372]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a5c      	ldr	r2, [pc, #368]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80014fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff f995 	bl	8000830 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff f991 	bl	8000830 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e231      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151c:	4b53      	ldr	r3, [pc, #332]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03c      	beq.n	80015ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01c      	beq.n	8001576 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153c:	4b4b      	ldr	r3, [pc, #300]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 800153e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001542:	4a4a      	ldr	r2, [pc, #296]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff f970 	bl	8000830 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff f96c 	bl	8000830 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e20c      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001566:	4b41      	ldr	r3, [pc, #260]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 8001568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0ef      	beq.n	8001554 <HAL_RCC_OscConfig+0x3ec>
 8001574:	e01b      	b.n	80015ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001576:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 8001578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800157c:	4a3b      	ldr	r2, [pc, #236]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff f953 	bl	8000830 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff f94f 	bl	8000830 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e1ef      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a0:	4b32      	ldr	r3, [pc, #200]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80015a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1ef      	bne.n	800158e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80a6 	beq.w	8001708 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015c0:	4b2a      	ldr	r3, [pc, #168]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10d      	bne.n	80015e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	4b27      	ldr	r3, [pc, #156]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	4a26      	ldr	r2, [pc, #152]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d8:	4b24      	ldr	r3, [pc, #144]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e4:	2301      	movs	r3, #1
 80015e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <HAL_RCC_OscConfig+0x508>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d118      	bne.n	8001626 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <HAL_RCC_OscConfig+0x508>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001670 <HAL_RCC_OscConfig+0x508>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001600:	f7ff f916 	bl	8000830 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001608:	f7ff f912 	bl	8000830 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1b2      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <HAL_RCC_OscConfig+0x508>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d108      	bne.n	8001640 <HAL_RCC_OscConfig+0x4d8>
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 8001630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800163e:	e029      	b.n	8001694 <HAL_RCC_OscConfig+0x52c>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	2b05      	cmp	r3, #5
 8001646:	d115      	bne.n	8001674 <HAL_RCC_OscConfig+0x50c>
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800164e:	4a07      	ldr	r2, [pc, #28]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800165e:	4a03      	ldr	r2, [pc, #12]	@ (800166c <HAL_RCC_OscConfig+0x504>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001668:	e014      	b.n	8001694 <HAL_RCC_OscConfig+0x52c>
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	40007000 	.word	0x40007000
 8001674:	4b9a      	ldr	r3, [pc, #616]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167a:	4a99      	ldr	r2, [pc, #612]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001684:	4b96      	ldr	r3, [pc, #600]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168a:	4a95      	ldr	r2, [pc, #596]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d016      	beq.n	80016ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff f8c8 	bl	8000830 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a4:	f7ff f8c4 	bl	8000830 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e162      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ba:	4b89      	ldr	r3, [pc, #548]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 80016bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ed      	beq.n	80016a4 <HAL_RCC_OscConfig+0x53c>
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ca:	f7ff f8b1 	bl	8000830 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff f8ad 	bl	8000830 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e14b      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e8:	4b7d      	ldr	r3, [pc, #500]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ed      	bne.n	80016d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fc:	4b78      	ldr	r3, [pc, #480]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001700:	4a77      	ldr	r2, [pc, #476]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001706:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d03c      	beq.n	800178e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01c      	beq.n	8001756 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800171c:	4b70      	ldr	r3, [pc, #448]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 800171e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001722:	4a6f      	ldr	r2, [pc, #444]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff f880 	bl	8000830 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001734:	f7ff f87c 	bl	8000830 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e11c      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001746:	4b66      	ldr	r3, [pc, #408]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001748:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ef      	beq.n	8001734 <HAL_RCC_OscConfig+0x5cc>
 8001754:	e01b      	b.n	800178e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001756:	4b62      	ldr	r3, [pc, #392]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001758:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800175c:	4a60      	ldr	r2, [pc, #384]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff f863 	bl	8000830 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800176e:	f7ff f85f 	bl	8000830 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0ff      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001780:	4b57      	ldr	r3, [pc, #348]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ef      	bne.n	800176e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80f3 	beq.w	800197e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	2b02      	cmp	r3, #2
 800179e:	f040 80c9 	bne.w	8001934 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017a2:	4b4f      	ldr	r3, [pc, #316]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f003 0203 	and.w	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d12c      	bne.n	8001810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c0:	3b01      	subs	r3, #1
 80017c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d123      	bne.n	8001810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d11b      	bne.n	8001810 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d113      	bne.n	8001810 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f2:	085b      	lsrs	r3, r3, #1
 80017f4:	3b01      	subs	r3, #1
 80017f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d109      	bne.n	8001810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	3b01      	subs	r3, #1
 800180a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d06b      	beq.n	80018e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d062      	beq.n	80018dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001816:	4b32      	ldr	r3, [pc, #200]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0ac      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001826:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a2d      	ldr	r2, [pc, #180]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 800182c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001830:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001832:	f7fe fffd 	bl	8000830 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7fe fff9 	bl	8000830 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e099      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001858:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_RCC_OscConfig+0x77c>)
 800185e:	4013      	ands	r3, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001868:	3a01      	subs	r2, #1
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	4311      	orrs	r1, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001872:	0212      	lsls	r2, r2, #8
 8001874:	4311      	orrs	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800187a:	0852      	lsrs	r2, r2, #1
 800187c:	3a01      	subs	r2, #1
 800187e:	0552      	lsls	r2, r2, #21
 8001880:	4311      	orrs	r1, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001886:	0852      	lsrs	r2, r2, #1
 8001888:	3a01      	subs	r2, #1
 800188a:	0652      	lsls	r2, r2, #25
 800188c:	4311      	orrs	r1, r2
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001892:	06d2      	lsls	r2, r2, #27
 8001894:	430a      	orrs	r2, r1
 8001896:	4912      	ldr	r1, [pc, #72]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 8001898:	4313      	orrs	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0f      	ldr	r2, [pc, #60]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018a8:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4a0c      	ldr	r2, [pc, #48]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018b4:	f7fe ffbc 	bl	8000830 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7fe ffb8 	bl	8000830 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e058      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <HAL_RCC_OscConfig+0x778>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018da:	e050      	b.n	800197e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e04f      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
 80018e0:	40021000 	.word	0x40021000
 80018e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e8:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d144      	bne.n	800197e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018f4:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a23      	ldr	r2, [pc, #140]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001900:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a20      	ldr	r2, [pc, #128]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800190a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800190c:	f7fe ff90 	bl	8000830 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7fe ff8c 	bl	8000830 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e02c      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x7ac>
 8001932:	e024      	b.n	800197e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d01f      	beq.n	800197a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 8001940:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001946:	f7fe ff73 	bl	8000830 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194e:	f7fe ff6f 	bl	8000830 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e00f      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4905      	ldr	r1, [pc, #20]	@ (8001988 <HAL_RCC_OscConfig+0x820>)
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_RCC_OscConfig+0x824>)
 8001974:	4013      	ands	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
 8001978:	e001      	b.n	800197e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	feeefffc 	.word	0xfeeefffc

08001990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0e7      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b75      	ldr	r3, [pc, #468]	@ (8001b7c <HAL_RCC_ClockConfig+0x1ec>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d910      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b72      	ldr	r3, [pc, #456]	@ (8001b7c <HAL_RCC_ClockConfig+0x1ec>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 0207 	bic.w	r2, r3, #7
 80019ba:	4970      	ldr	r1, [pc, #448]	@ (8001b7c <HAL_RCC_ClockConfig+0x1ec>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b6e      	ldr	r3, [pc, #440]	@ (8001b7c <HAL_RCC_ClockConfig+0x1ec>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0cf      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d010      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	4b66      	ldr	r3, [pc, #408]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d908      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b63      	ldr	r3, [pc, #396]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4960      	ldr	r1, [pc, #384]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d04c      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a16:	4b5a      	ldr	r3, [pc, #360]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d121      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0a6      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2e:	4b54      	ldr	r3, [pc, #336]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d115      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e09a      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a46:	4b4e      	ldr	r3, [pc, #312]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e08e      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a56:	4b4a      	ldr	r3, [pc, #296]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e086      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4b46      	ldr	r3, [pc, #280]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 0203 	bic.w	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4943      	ldr	r1, [pc, #268]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a78:	f7fe feda 	bl	8000830 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7fe fed6 	bl	8000830 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e06e      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	4b3a      	ldr	r3, [pc, #232]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 020c 	and.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1eb      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d010      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d208      	bcs.n	8001ad6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	492b      	ldr	r1, [pc, #172]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad6:	4b29      	ldr	r3, [pc, #164]	@ (8001b7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d210      	bcs.n	8001b06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae4:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <HAL_RCC_ClockConfig+0x1ec>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 0207 	bic.w	r2, r3, #7
 8001aec:	4923      	ldr	r1, [pc, #140]	@ (8001b7c <HAL_RCC_ClockConfig+0x1ec>)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af4:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <HAL_RCC_ClockConfig+0x1ec>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e036      	b.n	8001b74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	4918      	ldr	r1, [pc, #96]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d009      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b30:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4910      	ldr	r1, [pc, #64]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b44:	f000 f824 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	490b      	ldr	r1, [pc, #44]	@ (8001b84 <HAL_RCC_ClockConfig+0x1f4>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	4a09      	ldr	r2, [pc, #36]	@ (8001b88 <HAL_RCC_ClockConfig+0x1f8>)
 8001b62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <HAL_RCC_ClockConfig+0x1fc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fe11 	bl	8000790 <HAL_InitTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b72:	7afb      	ldrb	r3, [r7, #11]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40022000 	.word	0x40022000
 8001b80:	40021000 	.word	0x40021000
 8001b84:	080030d0 	.word	0x080030d0
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	@ 0x24
 8001b94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d121      	bne.n	8001c02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d11e      	bne.n	8001c02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bc4:	4b34      	ldr	r3, [pc, #208]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bd0:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	e005      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001be0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bec:	4a2b      	ldr	r2, [pc, #172]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d102      	bne.n	8001c0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c08:	4b25      	ldr	r3, [pc, #148]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c0a:	61bb      	str	r3, [r7, #24]
 8001c0c:	e004      	b.n	8001c18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c14:	4b23      	ldr	r3, [pc, #140]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d134      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d003      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0xac>
 8001c34:	e005      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c38:	617b      	str	r3, [r7, #20]
      break;
 8001c3a:	e005      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c3e:	617b      	str	r3, [r7, #20]
      break;
 8001c40:	e002      	b.n	8001c48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	617b      	str	r3, [r7, #20]
      break;
 8001c46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	3301      	adds	r3, #1
 8001c54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	0a1b      	lsrs	r3, r3, #8
 8001c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	fb03 f202 	mul.w	r2, r3, r2
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	0e5b      	lsrs	r3, r3, #25
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c88:	69bb      	ldr	r3, [r7, #24]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	080030e0 	.word	0x080030e0
 8001ca0:	00f42400 	.word	0x00f42400
 8001ca4:	007a1200 	.word	0x007a1200

08001ca8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cc0:	f7ff f9de 	bl	8001080 <HAL_PWREx_GetVoltageRange>
 8001cc4:	6178      	str	r0, [r7, #20]
 8001cc6:	e014      	b.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	4a24      	ldr	r2, [pc, #144]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd4:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ce0:	f7ff f9ce 	bl	8001080 <HAL_PWREx_GetVoltageRange>
 8001ce4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf8:	d10b      	bne.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b80      	cmp	r3, #128	@ 0x80
 8001cfe:	d919      	bls.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d04:	d902      	bls.n	8001d0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d06:	2302      	movs	r3, #2
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	e013      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e010      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b80      	cmp	r3, #128	@ 0x80
 8001d16:	d902      	bls.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d18:	2303      	movs	r3, #3
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e00a      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b80      	cmp	r3, #128	@ 0x80
 8001d22:	d102      	bne.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d24:	2302      	movs	r3, #2
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e004      	b.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b70      	cmp	r3, #112	@ 0x70
 8001d2e:	d101      	bne.n	8001d34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d30:	2301      	movs	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 0207 	bic.w	r2, r3, #7
 8001d3c:	4909      	ldr	r1, [pc, #36]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d44:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40022000 	.word	0x40022000

08001d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d70:	2300      	movs	r3, #0
 8001d72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d74:	2300      	movs	r3, #0
 8001d76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d031      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001d8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d92:	d814      	bhi.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d9c:	d10f      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001daa:	e00c      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3304      	adds	r3, #4
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fa10 	bl	80021d8 <RCCEx_PLLSAI1_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dbc:	e003      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dc6:	7cfb      	ldrb	r3, [r7, #19]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10b      	bne.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dcc:	4b51      	ldr	r3, [pc, #324]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dda:	494e      	ldr	r1, [pc, #312]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001de2:	e001      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 809e 	beq.w	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dfa:	4b46      	ldr	r3, [pc, #280]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00d      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4b40      	ldr	r3, [pc, #256]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	4a3f      	ldr	r2, [pc, #252]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a39      	ldr	r2, [pc, #228]	@ (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e38:	f7fe fcfa 	bl	8000830 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e3e:	e009      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e40:	f7fe fcf6 	bl	8000830 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d902      	bls.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	74fb      	strb	r3, [r7, #19]
        break;
 8001e52:	e005      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e54:	4b30      	ldr	r3, [pc, #192]	@ (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ef      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d15a      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e66:	4b2b      	ldr	r3, [pc, #172]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01e      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d019      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e82:	4b24      	ldr	r3, [pc, #144]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	4a1f      	ldr	r2, [pc, #124]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001eae:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d016      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7fe fcb6 	bl	8000830 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe fcb2 	bl	8000830 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d902      	bls.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	74fb      	strb	r3, [r7, #19]
            break;
 8001ede:	e006      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0ec      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001eee:	7cfb      	ldrb	r3, [r7, #19]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001efa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f02:	4904      	ldr	r1, [pc, #16]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f0a:	e009      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	74bb      	strb	r3, [r7, #18]
 8001f10:	e006      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f20:	7c7b      	ldrb	r3, [r7, #17]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d105      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4b8a      	ldr	r3, [pc, #552]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2a:	4a89      	ldr	r2, [pc, #548]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f3e:	4b84      	ldr	r3, [pc, #528]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f44:	f023 0203 	bic.w	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4980      	ldr	r1, [pc, #512]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f60:	4b7b      	ldr	r3, [pc, #492]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f66:	f023 020c 	bic.w	r2, r3, #12
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	4978      	ldr	r1, [pc, #480]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f82:	4b73      	ldr	r3, [pc, #460]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f88:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	496f      	ldr	r1, [pc, #444]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001faa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fb2:	4967      	ldr	r1, [pc, #412]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fc6:	4b62      	ldr	r3, [pc, #392]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fcc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd4:	495e      	ldr	r1, [pc, #376]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fe8:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff6:	4956      	ldr	r1, [pc, #344]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800200a:	4b51      	ldr	r3, [pc, #324]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002010:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002018:	494d      	ldr	r1, [pc, #308]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d028      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800202c:	4b48      	ldr	r3, [pc, #288]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	4945      	ldr	r1, [pc, #276]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800204a:	d106      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800204c:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a3f      	ldr	r2, [pc, #252]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002056:	60d3      	str	r3, [r2, #12]
 8002058:	e011      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002062:	d10c      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	2101      	movs	r1, #1
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f8b4 	bl	80021d8 <RCCEx_PLLSAI1_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d028      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800208a:	4b31      	ldr	r3, [pc, #196]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	492d      	ldr	r1, [pc, #180]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020a8:	d106      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4a28      	ldr	r2, [pc, #160]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020b4:	60d3      	str	r3, [r2, #12]
 80020b6:	e011      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2101      	movs	r1, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 f885 	bl	80021d8 <RCCEx_PLLSAI1_Config>
 80020ce:	4603      	mov	r3, r0
 80020d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80020d8:	7cfb      	ldrb	r3, [r7, #19]
 80020da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01c      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020e8:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f6:	4916      	ldr	r1, [pc, #88]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002106:	d10c      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f862 	bl	80021d8 <RCCEx_PLLSAI1_Config>
 8002114:	4603      	mov	r3, r0
 8002116:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800212e:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002134:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213c:	4904      	ldr	r1, [pc, #16]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002144:	7cbb      	ldrb	r3, [r7, #18]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000

08002154 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800215c:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <HAL_RCCEx_CRSConfig+0x7c>)
 800215e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002160:	4a1b      	ldr	r2, [pc, #108]	@ (80021d0 <HAL_RCCEx_CRSConfig+0x7c>)
 8002162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002166:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCCEx_CRSConfig+0x7c>)
 800216a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216c:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <HAL_RCCEx_CRSConfig+0x7c>)
 800216e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002172:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800219c:	4a0d      	ldr	r2, [pc, #52]	@ (80021d4 <HAL_RCCEx_CRSConfig+0x80>)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits for STM32L412xx/L422xx or TRIM[5:0] bits otherwise
     according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80021a2:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <HAL_RCCEx_CRSConfig+0x80>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	4908      	ldr	r1, [pc, #32]	@ (80021d4 <HAL_RCCEx_CRSConfig+0x80>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80021b6:	4b07      	ldr	r3, [pc, #28]	@ (80021d4 <HAL_RCCEx_CRSConfig+0x80>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a06      	ldr	r2, [pc, #24]	@ (80021d4 <HAL_RCCEx_CRSConfig+0x80>)
 80021bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021c0:	6013      	str	r3, [r2, #0]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40006000 	.word	0x40006000

080021d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021e6:	4b74      	ldr	r3, [pc, #464]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d018      	beq.n	8002224 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021f2:	4b71      	ldr	r3, [pc, #452]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0203 	and.w	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d10d      	bne.n	800221e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
       ||
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800220a:	4b6b      	ldr	r3, [pc, #428]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
       ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d047      	beq.n	80022ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	e044      	b.n	80022ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d018      	beq.n	800225e <RCCEx_PLLSAI1_Config+0x86>
 800222c:	2b03      	cmp	r3, #3
 800222e:	d825      	bhi.n	800227c <RCCEx_PLLSAI1_Config+0xa4>
 8002230:	2b01      	cmp	r3, #1
 8002232:	d002      	beq.n	800223a <RCCEx_PLLSAI1_Config+0x62>
 8002234:	2b02      	cmp	r3, #2
 8002236:	d009      	beq.n	800224c <RCCEx_PLLSAI1_Config+0x74>
 8002238:	e020      	b.n	800227c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800223a:	4b5f      	ldr	r3, [pc, #380]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11d      	bne.n	8002282 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224a:	e01a      	b.n	8002282 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800224c:	4b5a      	ldr	r3, [pc, #360]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d116      	bne.n	8002286 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225c:	e013      	b.n	8002286 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800225e:	4b56      	ldr	r3, [pc, #344]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800226a:	4b53      	ldr	r3, [pc, #332]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800227a:	e006      	b.n	800228a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
      break;
 8002280:	e004      	b.n	800228c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002282:	bf00      	nop
 8002284:	e002      	b.n	800228c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002286:	bf00      	nop
 8002288:	e000      	b.n	800228c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800228a:	bf00      	nop
    }

    if(status == HAL_OK)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002292:	4b49      	ldr	r3, [pc, #292]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	430b      	orrs	r3, r1
 80022a8:	4943      	ldr	r1, [pc, #268]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d17c      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022b4:	4b40      	ldr	r3, [pc, #256]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a3f      	ldr	r2, [pc, #252]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c0:	f7fe fab6 	bl	8000830 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022c6:	e009      	b.n	80022dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022c8:	f7fe fab2 	bl	8000830 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d902      	bls.n	80022dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	73fb      	strb	r3, [r7, #15]
        break;
 80022da:	e005      	b.n	80022e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022dc:	4b36      	ldr	r3, [pc, #216]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ef      	bne.n	80022c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d15f      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d110      	bne.n	8002316 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022f4:	4b30      	ldr	r3, [pc, #192]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80022fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6892      	ldr	r2, [r2, #8]
 8002304:	0211      	lsls	r1, r2, #8
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68d2      	ldr	r2, [r2, #12]
 800230a:	06d2      	lsls	r2, r2, #27
 800230c:	430a      	orrs	r2, r1
 800230e:	492a      	ldr	r1, [pc, #168]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002310:	4313      	orrs	r3, r2
 8002312:	610b      	str	r3, [r1, #16]
 8002314:	e027      	b.n	8002366 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d112      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800231c:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002324:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6892      	ldr	r2, [r2, #8]
 800232c:	0211      	lsls	r1, r2, #8
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6912      	ldr	r2, [r2, #16]
 8002332:	0852      	lsrs	r2, r2, #1
 8002334:	3a01      	subs	r2, #1
 8002336:	0552      	lsls	r2, r2, #21
 8002338:	430a      	orrs	r2, r1
 800233a:	491f      	ldr	r1, [pc, #124]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	610b      	str	r3, [r1, #16]
 8002340:	e011      	b.n	8002366 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002342:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800234a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6892      	ldr	r2, [r2, #8]
 8002352:	0211      	lsls	r1, r2, #8
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6952      	ldr	r2, [r2, #20]
 8002358:	0852      	lsrs	r2, r2, #1
 800235a:	3a01      	subs	r2, #1
 800235c:	0652      	lsls	r2, r2, #25
 800235e:	430a      	orrs	r2, r1
 8002360:	4915      	ldr	r1, [pc, #84]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002362:	4313      	orrs	r3, r2
 8002364:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a13      	ldr	r2, [pc, #76]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800236c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002370:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7fe fa5d 	bl	8000830 <HAL_GetTick>
 8002376:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002378:	e009      	b.n	800238e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800237a:	f7fe fa59 	bl	8000830 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d902      	bls.n	800238e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	73fb      	strb	r3, [r7, #15]
          break;
 800238c:	e005      	b.n	800239a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0ef      	beq.n	800237a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d106      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4903      	ldr	r1, [pc, #12]	@ (80023b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e095      	b.n	80024fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023de:	d009      	beq.n	80023f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
 80023e6:	e005      	b.n	80023f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe f88e 	bl	8000530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800242a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002434:	d902      	bls.n	800243c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e002      	b.n	8002442 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800243c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002440:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800244a:	d007      	beq.n	800245c <HAL_SPI_Init+0xa0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002454:	d002      	beq.n	800245c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249e:	ea42 0103 	orr.w	r1, r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	f003 0204 	and.w	r2, r3, #4
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80024d8:	ea42 0103 	orr.w	r1, r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b088      	sub	sp, #32
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002512:	f7fe f98d 	bl	8000830 <HAL_GetTick>
 8002516:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
 800252a:	e15c      	b.n	80027e6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_SPI_Transmit+0x36>
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e154      	b.n	80027e6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_SPI_Transmit+0x48>
 8002546:	2302      	movs	r3, #2
 8002548:	e14d      	b.n	80027e6 <HAL_SPI_Transmit+0x2e4>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2203      	movs	r2, #3
 8002556:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	88fa      	ldrh	r2, [r7, #6]
 800256a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800259c:	d10f      	bne.n	80025be <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c8:	2b40      	cmp	r3, #64	@ 0x40
 80025ca:	d007      	beq.n	80025dc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80025e4:	d952      	bls.n	800268c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_Transmit+0xf2>
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d145      	bne.n	8002680 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f8:	881a      	ldrh	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002604:	1c9a      	adds	r2, r3, #2
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002618:	e032      	b.n	8002680 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b02      	cmp	r3, #2
 8002626:	d112      	bne.n	800264e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800264c:	e018      	b.n	8002680 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800264e:	f7fe f8ef 	bl	8000830 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d803      	bhi.n	8002666 <HAL_SPI_Transmit+0x164>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d102      	bne.n	800266c <HAL_SPI_Transmit+0x16a>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0b2      	b.n	80027e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1c7      	bne.n	800261a <HAL_SPI_Transmit+0x118>
 800268a:	e083      	b.n	8002794 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_SPI_Transmit+0x198>
 8002694:	8b7b      	ldrh	r3, [r7, #26]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d177      	bne.n	800278a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d912      	bls.n	80026ca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a8:	881a      	ldrh	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	1c9a      	adds	r2, r3, #2
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b02      	subs	r3, #2
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80026c8:	e05f      	b.n	800278a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80026f0:	e04b      	b.n	800278a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d12b      	bne.n	8002758 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d912      	bls.n	8002730 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270e:	881a      	ldrh	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271a:	1c9a      	adds	r2, r3, #2
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b02      	subs	r3, #2
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800272e:	e02c      	b.n	800278a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	7812      	ldrb	r2, [r2, #0]
 800273c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002756:	e018      	b.n	800278a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002758:	f7fe f86a 	bl	8000830 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d803      	bhi.n	8002770 <HAL_SPI_Transmit+0x26e>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d102      	bne.n	8002776 <HAL_SPI_Transmit+0x274>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e02d      	b.n	80027e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ae      	bne.n	80026f2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	6839      	ldr	r1, [r7, #0]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f947 	bl	8002a2c <SPI_EndRxTxTransaction>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002800:	f7fe f816 	bl	8000830 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	4413      	add	r3, r2
 800280e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002810:	f7fe f80e 	bl	8000830 <HAL_GetTick>
 8002814:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002816:	4b39      	ldr	r3, [pc, #228]	@ (80028fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	015b      	lsls	r3, r3, #5
 800281c:	0d1b      	lsrs	r3, r3, #20
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002826:	e054      	b.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282e:	d050      	beq.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002830:	f7fd fffe 	bl	8000830 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	429a      	cmp	r2, r3
 800283e:	d902      	bls.n	8002846 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d13d      	bne.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800285e:	d111      	bne.n	8002884 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002868:	d004      	beq.n	8002874 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002872:	d107      	bne.n	8002884 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800288c:	d10f      	bne.n	80028ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e017      	b.n	80028f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	429a      	cmp	r2, r3
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d19b      	bne.n	8002828 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000

08002900 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002912:	f7fd ff8d 	bl	8000830 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002922:	f7fd ff85 	bl	8000830 <HAL_GetTick>
 8002926:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	330c      	adds	r3, #12
 800292e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002930:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00da      	lsls	r2, r3, #3
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	0d1b      	lsrs	r3, r3, #20
 8002940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002948:	e060      	b.n	8002a0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002950:	d107      	bne.n	8002962 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002960:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d050      	beq.n	8002a0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800296a:	f7fd ff61 	bl	8000830 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002976:	429a      	cmp	r2, r3
 8002978:	d902      	bls.n	8002980 <SPI_WaitFifoStateUntilTimeout+0x80>
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	2b00      	cmp	r3, #0
 800297e:	d13d      	bne.n	80029fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800298e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002998:	d111      	bne.n	80029be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a2:	d004      	beq.n	80029ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ac:	d107      	bne.n	80029be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029c6:	d10f      	bne.n	80029e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e010      	b.n	8002a1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d196      	bne.n	800294a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3728      	adds	r7, #40	@ 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000000 	.word	0x20000000

08002a2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff ff5b 	bl	8002900 <SPI_WaitFifoStateUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e027      	b.n	8002ab0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2200      	movs	r2, #0
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7ff fec0 	bl	80027f0 <SPI_WaitFlagStateUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7a:	f043 0220 	orr.w	r2, r3, #32
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e014      	b.n	8002ab0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff ff34 	bl	8002900 <SPI_WaitFifoStateUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa2:	f043 0220 	orr.w	r2, r3, #32
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e000      	b.n	8002ab0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	4638      	mov	r0, r7
 8002ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002adc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8002ae0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4013      	ands	r3, r2
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4638      	mov	r0, r7
 8002b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8002b8e:	2201      	movs	r2, #1
 8002b90:	2140      	movs	r1, #64	@ 0x40
 8002b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b96:	f7fe f8f7 	bl	8000d88 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ba2:	f7fe f8f1 	bl	8000d88 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002ba6:	200a      	movs	r0, #10
 8002ba8:	f7fd fe4e 	bl	8000848 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	2180      	movs	r1, #128	@ 0x80
 8002bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bb4:	f7fe f8e8 	bl	8000d88 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002bb8:	200a      	movs	r0, #10
 8002bba:	f7fd fe45 	bl	8000848 <HAL_Delay>
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2140      	movs	r1, #64	@ 0x40
 8002bd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bd6:	f7fe f8d7 	bl	8000d88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2120      	movs	r1, #32
 8002bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002be2:	f7fe f8d1 	bl	8000d88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8002be6:	1df9      	adds	r1, r7, #7
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bec:	2201      	movs	r2, #1
 8002bee:	4806      	ldr	r0, [pc, #24]	@ (8002c08 <ssd1306_WriteCommand+0x44>)
 8002bf0:	f7ff fc87 	bl	8002502 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	2140      	movs	r1, #64	@ 0x40
 8002bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bfc:	f7fe f8c4 	bl	8000d88 <HAL_GPIO_WritePin>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000028 	.word	0x20000028

08002c0c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002c16:	2200      	movs	r2, #0
 8002c18:	2140      	movs	r1, #64	@ 0x40
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1e:	f7fe f8b3 	bl	8000d88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8002c22:	2201      	movs	r2, #1
 8002c24:	2120      	movs	r1, #32
 8002c26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c2a:	f7fe f8ad 	bl	8000d88 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4806      	ldr	r0, [pc, #24]	@ (8002c54 <ssd1306_WriteData+0x48>)
 8002c3a:	f7ff fc62 	bl	8002502 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002c3e:	2201      	movs	r2, #1
 8002c40:	2140      	movs	r1, #64	@ 0x40
 8002c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c46:	f7fe f89f 	bl	8000d88 <HAL_GPIO_WritePin>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000028 	.word	0x20000028

08002c58 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002c5c:	f7ff ff95 	bl	8002b8a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002c60:	2064      	movs	r0, #100	@ 0x64
 8002c62:	f7fd fdf1 	bl	8000848 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002c66:	2000      	movs	r0, #0
 8002c68:	f000 f9d8 	bl	800301c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002c6c:	2020      	movs	r0, #32
 8002c6e:	f7ff ffa9 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7ff ffa6 	bl	8002bc4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002c78:	20b0      	movs	r0, #176	@ 0xb0
 8002c7a:	f7ff ffa3 	bl	8002bc4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002c7e:	20c8      	movs	r0, #200	@ 0xc8
 8002c80:	f7ff ffa0 	bl	8002bc4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7ff ff9d 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002c8a:	2010      	movs	r0, #16
 8002c8c:	f7ff ff9a 	bl	8002bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002c90:	2040      	movs	r0, #64	@ 0x40
 8002c92:	f7ff ff97 	bl	8002bc4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002c96:	20ff      	movs	r0, #255	@ 0xff
 8002c98:	f000 f9ac 	bl	8002ff4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002c9c:	20a1      	movs	r0, #161	@ 0xa1
 8002c9e:	f7ff ff91 	bl	8002bc4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002ca2:	20a6      	movs	r0, #166	@ 0xa6
 8002ca4:	f7ff ff8e 	bl	8002bc4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002ca8:	20a8      	movs	r0, #168	@ 0xa8
 8002caa:	f7ff ff8b 	bl	8002bc4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002cae:	201f      	movs	r0, #31
 8002cb0:	f7ff ff88 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002cb4:	20a4      	movs	r0, #164	@ 0xa4
 8002cb6:	f7ff ff85 	bl	8002bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002cba:	20d3      	movs	r0, #211	@ 0xd3
 8002cbc:	f7ff ff82 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7ff ff7f 	bl	8002bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002cc6:	20d5      	movs	r0, #213	@ 0xd5
 8002cc8:	f7ff ff7c 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002ccc:	20f0      	movs	r0, #240	@ 0xf0
 8002cce:	f7ff ff79 	bl	8002bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002cd2:	20d9      	movs	r0, #217	@ 0xd9
 8002cd4:	f7ff ff76 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002cd8:	2022      	movs	r0, #34	@ 0x22
 8002cda:	f7ff ff73 	bl	8002bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002cde:	20da      	movs	r0, #218	@ 0xda
 8002ce0:	f7ff ff70 	bl	8002bc4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f7ff ff6d 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002cea:	20db      	movs	r0, #219	@ 0xdb
 8002cec:	f7ff ff6a 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002cf0:	2020      	movs	r0, #32
 8002cf2:	f7ff ff67 	bl	8002bc4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002cf6:	208d      	movs	r0, #141	@ 0x8d
 8002cf8:	f7ff ff64 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002cfc:	2014      	movs	r0, #20
 8002cfe:	f7ff ff61 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002d02:	2001      	movs	r0, #1
 8002d04:	f000 f98a 	bl	800301c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f000 f80f 	bl	8002d2c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002d0e:	f000 f825 	bl	8002d5c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002d12:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <ssd1306_Init+0xd0>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002d18:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <ssd1306_Init+0xd0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002d1e:	4b02      	ldr	r3, [pc, #8]	@ (8002d28 <ssd1306_Init+0xd0>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	711a      	strb	r2, [r3, #4]
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000570 	.word	0x20000570

08002d2c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <ssd1306_Fill+0x14>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <ssd1306_Fill+0x16>
 8002d40:	23ff      	movs	r3, #255	@ 0xff
 8002d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d46:	4619      	mov	r1, r3
 8002d48:	4803      	ldr	r0, [pc, #12]	@ (8002d58 <ssd1306_Fill+0x2c>)
 8002d4a:	f000 f985 	bl	8003058 <memset>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000370 	.word	0x20000370

08002d5c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002d62:	2300      	movs	r3, #0
 8002d64:	71fb      	strb	r3, [r7, #7]
 8002d66:	e016      	b.n	8002d96 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	3b50      	subs	r3, #80	@ 0x50
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff28 	bl	8002bc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff ff25 	bl	8002bc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002d7a:	2010      	movs	r0, #16
 8002d7c:	f7ff ff22 	bl	8002bc4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	01db      	lsls	r3, r3, #7
 8002d84:	4a08      	ldr	r2, [pc, #32]	@ (8002da8 <ssd1306_UpdateScreen+0x4c>)
 8002d86:	4413      	add	r3, r2
 8002d88:	2180      	movs	r1, #128	@ 0x80
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff3e 	bl	8002c0c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	3301      	adds	r3, #1
 8002d94:	71fb      	strb	r3, [r7, #7]
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d9e5      	bls.n	8002d68 <ssd1306_UpdateScreen+0xc>
    }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000370 	.word	0x20000370

08002dac <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
 8002db6:	460b      	mov	r3, r1
 8002db8:	71bb      	strb	r3, [r7, #6]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	db3d      	blt.n	8002e42 <ssd1306_DrawPixel+0x96>
 8002dc6:	79bb      	ldrb	r3, [r7, #6]
 8002dc8:	2b1f      	cmp	r3, #31
 8002dca:	d83a      	bhi.n	8002e42 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002dcc:	797b      	ldrb	r3, [r7, #5]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d11a      	bne.n	8002e08 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002dd2:	79fa      	ldrb	r2, [r7, #7]
 8002dd4:	79bb      	ldrb	r3, [r7, #6]
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	b2d8      	uxtb	r0, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	01db      	lsls	r3, r3, #7
 8002dde:	4413      	add	r3, r2
 8002de0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e50 <ssd1306_DrawPixel+0xa4>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	b25a      	sxtb	r2, r3
 8002de6:	79bb      	ldrb	r3, [r7, #6]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	b25b      	sxtb	r3, r3
 8002df4:	4313      	orrs	r3, r2
 8002df6:	b259      	sxtb	r1, r3
 8002df8:	79fa      	ldrb	r2, [r7, #7]
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	01db      	lsls	r3, r3, #7
 8002dfe:	4413      	add	r3, r2
 8002e00:	b2c9      	uxtb	r1, r1
 8002e02:	4a13      	ldr	r2, [pc, #76]	@ (8002e50 <ssd1306_DrawPixel+0xa4>)
 8002e04:	54d1      	strb	r1, [r2, r3]
 8002e06:	e01d      	b.n	8002e44 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e08:	79fa      	ldrb	r2, [r7, #7]
 8002e0a:	79bb      	ldrb	r3, [r7, #6]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	b2d8      	uxtb	r0, r3
 8002e10:	4603      	mov	r3, r0
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	4413      	add	r3, r2
 8002e16:	4a0e      	ldr	r2, [pc, #56]	@ (8002e50 <ssd1306_DrawPixel+0xa4>)
 8002e18:	5cd3      	ldrb	r3, [r2, r3]
 8002e1a:	b25a      	sxtb	r2, r3
 8002e1c:	79bb      	ldrb	r3, [r7, #6]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f303 	lsl.w	r3, r1, r3
 8002e28:	b25b      	sxtb	r3, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b259      	sxtb	r1, r3
 8002e32:	79fa      	ldrb	r2, [r7, #7]
 8002e34:	4603      	mov	r3, r0
 8002e36:	01db      	lsls	r3, r3, #7
 8002e38:	4413      	add	r3, r2
 8002e3a:	b2c9      	uxtb	r1, r1
 8002e3c:	4a04      	ldr	r2, [pc, #16]	@ (8002e50 <ssd1306_DrawPixel+0xa4>)
 8002e3e:	54d1      	strb	r1, [r2, r3]
 8002e40:	e000      	b.n	8002e44 <ssd1306_DrawPixel+0x98>
        return;
 8002e42:	bf00      	nop
    }
}
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000370 	.word	0x20000370

08002e54 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b089      	sub	sp, #36	@ 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	4638      	mov	r0, r7
 8002e5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002e62:	4623      	mov	r3, r4
 8002e64:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b1f      	cmp	r3, #31
 8002e6a:	d902      	bls.n	8002e72 <ssd1306_WriteChar+0x1e>
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002e70:	d901      	bls.n	8002e76 <ssd1306_WriteChar+0x22>
        return 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e079      	b.n	8002f6a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <ssd1306_WriteChar+0x34>
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	3b20      	subs	r3, #32
 8002e82:	4413      	add	r3, r2
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	e000      	b.n	8002e8a <ssd1306_WriteChar+0x36>
 8002e88:	783b      	ldrb	r3, [r7, #0]
 8002e8a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002e8c:	4b39      	ldr	r3, [pc, #228]	@ (8002f74 <ssd1306_WriteChar+0x120>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	4413      	add	r3, r2
 8002e96:	2b80      	cmp	r3, #128	@ 0x80
 8002e98:	dc06      	bgt.n	8002ea8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002e9a:	4b36      	ldr	r3, [pc, #216]	@ (8002f74 <ssd1306_WriteChar+0x120>)
 8002e9c:	885b      	ldrh	r3, [r3, #2]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	787b      	ldrb	r3, [r7, #1]
 8002ea2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	dd01      	ble.n	8002eac <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e05e      	b.n	8002f6a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	e04d      	b.n	8002f4e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	3b20      	subs	r3, #32
 8002eb8:	7879      	ldrb	r1, [r7, #1]
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	440b      	add	r3, r1
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e036      	b.n	8002f40 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d013      	beq.n	8002f0a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002ee2:	4b24      	ldr	r3, [pc, #144]	@ (8002f74 <ssd1306_WriteChar+0x120>)
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	b2d8      	uxtb	r0, r3
 8002ef0:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <ssd1306_WriteChar+0x120>)
 8002ef2:	885b      	ldrh	r3, [r3, #2]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002f02:	4619      	mov	r1, r3
 8002f04:	f7ff ff52 	bl	8002dac <ssd1306_DrawPixel>
 8002f08:	e017      	b.n	8002f3a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f74 <ssd1306_WriteChar+0x120>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	b2d8      	uxtb	r0, r3
 8002f18:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <ssd1306_WriteChar+0x120>)
 8002f1a:	885b      	ldrh	r3, [r3, #2]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	b2d9      	uxtb	r1, r3
 8002f26:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf0c      	ite	eq
 8002f2e:	2301      	moveq	r3, #1
 8002f30:	2300      	movne	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	f7ff ff39 	bl	8002dac <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d3c4      	bcc.n	8002ed2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	787b      	ldrb	r3, [r7, #1]
 8002f50:	461a      	mov	r2, r3
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d3ac      	bcc.n	8002eb2 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <ssd1306_WriteChar+0x120>)
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b03      	ldr	r3, [pc, #12]	@ (8002f74 <ssd1306_WriteChar+0x120>)
 8002f66:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	@ 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd90      	pop	{r4, r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000570 	.word	0x20000570

08002f78 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4638      	mov	r0, r7
 8002f82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002f86:	e013      	b.n	8002fb0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	7818      	ldrb	r0, [r3, #0]
 8002f8c:	7e3b      	ldrb	r3, [r7, #24]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	463b      	mov	r3, r7
 8002f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f94:	f7ff ff5e 	bl	8002e54 <ssd1306_WriteChar>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d002      	beq.n	8002faa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	e008      	b.n	8002fbc <ssd1306_WriteString+0x44>
        }
        str++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3301      	adds	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e7      	bne.n	8002f88 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	781b      	ldrb	r3, [r3, #0]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	460a      	mov	r2, r1
 8002fce:	71fb      	strb	r3, [r7, #7]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <ssd1306_SetCursor+0x2c>)
 8002fda:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002fdc:	79bb      	ldrb	r3, [r7, #6]
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b03      	ldr	r3, [pc, #12]	@ (8002ff0 <ssd1306_SetCursor+0x2c>)
 8002fe2:	805a      	strh	r2, [r3, #2]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	20000570 	.word	0x20000570

08002ff4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002ffe:	2381      	movs	r3, #129	@ 0x81
 8003000:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fddd 	bl	8002bc4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fdd9 	bl	8002bc4 <ssd1306_WriteCommand>
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800302c:	23af      	movs	r3, #175	@ 0xaf
 800302e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003030:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <ssd1306_SetDisplayOn+0x38>)
 8003032:	2201      	movs	r2, #1
 8003034:	715a      	strb	r2, [r3, #5]
 8003036:	e004      	b.n	8003042 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003038:	23ae      	movs	r3, #174	@ 0xae
 800303a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <ssd1306_SetDisplayOn+0x38>)
 800303e:	2200      	movs	r2, #0
 8003040:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fdbd 	bl	8002bc4 <ssd1306_WriteCommand>
}
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000570 	.word	0x20000570

08003058 <memset>:
 8003058:	4402      	add	r2, r0
 800305a:	4603      	mov	r3, r0
 800305c:	4293      	cmp	r3, r2
 800305e:	d100      	bne.n	8003062 <memset+0xa>
 8003060:	4770      	bx	lr
 8003062:	f803 1b01 	strb.w	r1, [r3], #1
 8003066:	e7f9      	b.n	800305c <memset+0x4>

08003068 <__libc_init_array>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	4d0d      	ldr	r5, [pc, #52]	@ (80030a0 <__libc_init_array+0x38>)
 800306c:	4c0d      	ldr	r4, [pc, #52]	@ (80030a4 <__libc_init_array+0x3c>)
 800306e:	1b64      	subs	r4, r4, r5
 8003070:	10a4      	asrs	r4, r4, #2
 8003072:	2600      	movs	r6, #0
 8003074:	42a6      	cmp	r6, r4
 8003076:	d109      	bne.n	800308c <__libc_init_array+0x24>
 8003078:	4d0b      	ldr	r5, [pc, #44]	@ (80030a8 <__libc_init_array+0x40>)
 800307a:	4c0c      	ldr	r4, [pc, #48]	@ (80030ac <__libc_init_array+0x44>)
 800307c:	f000 f818 	bl	80030b0 <_init>
 8003080:	1b64      	subs	r4, r4, r5
 8003082:	10a4      	asrs	r4, r4, #2
 8003084:	2600      	movs	r6, #0
 8003086:	42a6      	cmp	r6, r4
 8003088:	d105      	bne.n	8003096 <__libc_init_array+0x2e>
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003090:	4798      	blx	r3
 8003092:	3601      	adds	r6, #1
 8003094:	e7ee      	b.n	8003074 <__libc_init_array+0xc>
 8003096:	f855 3b04 	ldr.w	r3, [r5], #4
 800309a:	4798      	blx	r3
 800309c:	3601      	adds	r6, #1
 800309e:	e7f2      	b.n	8003086 <__libc_init_array+0x1e>
 80030a0:	080042ec 	.word	0x080042ec
 80030a4:	080042ec 	.word	0x080042ec
 80030a8:	080042ec 	.word	0x080042ec
 80030ac:	080042f0 	.word	0x080042f0

080030b0 <_init>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr

080030bc <_fini>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	bf00      	nop
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr
